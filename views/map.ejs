<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mapa Interativo GTA V</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        html, body {
            height: 100%;
            margin: 0;
        }
        #map {
            height: 100%;
            width: 100%;
            background-color: #0FA8D0;
        }
        #coordinates {
            position: absolute;
            top: 10px;
            left: 10px;
            background: white;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0,0,0,0.5);
            display: none; /* Inicialmente oculto */
            z-index: 1000; /* Certifique-se de que fique acima de outros elementos */
        }
    </style>
</head>
<body>
    <div id="map"></div>
    <div id="coordinates"></div> <!-- Painel para coordenadas -->

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script>
        // Inicializa o mapa
        const map = L.map('map', {
            center: [0, 0], // Centro inicial
            zoom: 2, // Nível de zoom inicial
            maxZoom: 8,
            minZoom: 2,
        });

        // Adiciona a imagem do mapa como uma camada
        const imageUrl = '/map.png';
        const imageBounds = [[-500, -300], [500, 100]];
        L.imageOverlay(imageUrl, imageBounds).addTo(map);
        map.fitBounds(imageBounds);

        // Busca as localizações do servidor
        fetch('/locations')
            .then(response => response.json())
            .then(locations => {
                console.log(locations); // Para depuração
                locations.forEach(location => {
                    let iconUrl;

                    // Lógica para definir a cor do ícone com base no valor de 'pixe'
                    if (location.pixe === 0) {
                        iconUrl = '/spray0.png'; // Ícone para pixe 0
                    } else if (location.pixe === 1) {
                        iconUrl = '/spray.png'; // Ícone para pixe 1
                    } else if (location.pixe === 2) {
                        iconUrl = '/spray2.png'; // Ícone para pixe 2
                    } else {
                        iconUrl = '/loja.png'; // Ícone para lojas
                    }

                    const customIcon = L.icon({
                        iconUrl: iconUrl,
                        iconSize: [25, 41],
                        iconAnchor: [12, 41],
                        popupAnchor: [1, -34],
                    });

                    // Formatação do popup
                    let popupContent = `
                        <strong>${location.nome}</strong><br>
                        ${location.description}<br>
                    `;

                    // Adiciona botões apenas se for um spray
                    if (location.pixe !== null) { // Verifica se pixe não é null (ou seja, é um spray)
                        popupContent += `
                            <button onclick="handleButtonClick('nosso', '${location.nome}')">Nosso</button>
                            <button onclick="handleButtonClick('deles', '${location.nome}')">Deles</button>
                        `;
                    }

                    L.marker(location.coords, { icon: customIcon })
                        .addTo(map)
                        .bindPopup(popupContent); // Adiciona o conteúdo formatado ao popup
                });
            })
            .catch(error => console.error('Error fetching locations:', error));

        // Função para lidar com cliques nos botões
        function handleButtonClick(type, locationName) {
            if (type === 'nosso') {
                const timerDuration = 7100; // Mude de 7100 para 10 segundos
                updatePixe(locationName, 1, timerDuration); // Passa o tempo do timer
                alert(`Você clicou em "Nosso" para ${locationName}. Pixe definido como 1.`);
            } else if (type === 'deles') {
                alert(`Você clicou em "Deles" para ${locationName}`);
            }
        }

        // Função para atualizar o pixe
        function updatePixe(locationName, newPixeValue, timerDuration) {
            fetch(`/updatePixe`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ nome: locationName, pixe: newPixeValue, tempo: timerDuration }),
            })
            .then(response => {
                if (response.ok) {
                    console.log(`Pixe atualizado para ${newPixeValue} na localização ${locationName}`);
                    // Inicia o timer localmente, se necessário
                } else {
                    console.error('Erro ao atualizar o pixe');
                }
            })
            .catch(error => console.error('Erro na requisição:', error));
        }

        // Função para iniciar o timer
        function startTimer(seconds) {
            setTimeout(() => {
                alert('O timer de 7100 segundos terminou!');
                // Aqui você pode adicionar lógica adicional após o timer
            }, seconds * 1000); // Converte segundos para milissegundos
        }

        // Evento de clique com o botão direito do mouse
        map.on('contextmenu', function(e) {
            const lat = e.latlng.lat.toFixed(4);
            const lng = e.latlng.lng.toFixed(4);
            const coordinatesDiv = document.getElementById('coordinates');
            coordinatesDiv.innerHTML = `Latitude: ${lat}, Longitude: ${lng}`;
            coordinatesDiv.style.display = 'block';
            coordinatesDiv.style.left = `${e.containerX + 10}px`;
            coordinatesDiv.style.top = `${e.containerY + 10}px`;
        });

        // Mover os controles de zoom para o centro superior
        L.control.zoom({
            position: 'topright' // Muda a posição para o canto superior direito
        }).addTo(map);

        // Função para atualizar a exibição do pixe
        function updatePixeDisplay(locationName) {
            fetch(`/locations`)
                .then(response => response.json())
                .then(locations => {
                    const location = locations.find(loc => loc.nome === locationName);
                    if (location) {
                        // Atualiza a exibição do pixe
                        document.getElementById(`pixe-${locationName}`).innerText = location.pixe; // Supondo que você tenha um elemento com esse ID
                    }
                })
                .catch(error => console.error('Erro ao atualizar pixe:', error));
        }

        // Chame essa função após a atualização do pixe
        setInterval(() => {
            updatePixeDisplay('nome_do_spray'); // Substitua pelo nome do spray que você deseja atualizar
        }, 1000); // Atualiza a cada segundo
    </script>
</body>
</html>